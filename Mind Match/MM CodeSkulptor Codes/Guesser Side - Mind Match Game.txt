"""
Mind Match Program
Enjoy the game :)
Yours, D'Cypher

Example Input Key: 
emj;8;0;emj;4;1;emj;6;3;emj2;1;1;emj;9;2;emj;11;1;emj;5;2;emj;8;3;emj;7;2;emj;6;3;p-def;Random Random

"""

#Import Default Modules
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui
    
import random
import math
import time

#Import Dictionary Modules
import user40_F3sJSVcOQU_7 as premise_dictionary

###========Import Images and Globals=========
class ImageInfo:
    def __init__(self, center, size, radius = 0):
        self.center = center
        self.size = size
        self.radius = radius

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

CANVAS_WIDTH = 334
CANVAS_HEIGHT = 600

iphone_info = ImageInfo([580/2+10, 1200/2+30], [540, 1080])
iphone_image = simplegui.load_image("https://static-cdn.fullcontact.com/images/website/iphone5.png")

splash_info = ImageInfo([56, 46], [80, 85])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

lock_button_info = ImageInfo([512/2, 512/2], [512, 512])
lock_button_image = simplegui.load_image("http://open.az/templates/slide/images/closed.png")

lock_buttonRed_info = ImageInfo([512/2, 512/2], [512, 512])
lock_buttonRed_image = simplegui.load_image("http://cdn.mysitemyway.com/etc-mysitemyway/icons/legacy-previews/icons/simple-red-square-icons-business/128651-simple-red-square-icon-business-lock6-sc48.png")

logo_info = ImageInfo([175/2, 175/2], [175, 175])
logo_image = simplegui.load_image("http://a4.mzstatic.com/us/r30/Purple2/v4/62/64/96/6264960b-783f-52d7-5c5c-dc0d7fe5c25d/icon175x175.jpeg")

#Themes
theme_emoji = simplegui.load_image("https://s3-us-west-1.amazonaws.com/rappler-assets/1014A8772D75442E93D092B9D451652D/img/5CBD86790FEB412C96F9B4E16E1A71CA/twitter-emoji-feature-20140403-1.jpg?AWSAccessKeyId=AKIAJZT25YUX4PJDIYZA&Expires=1712143319&Signature=GAxzBNxHun2708GGo3J1%2FsOYAB4%3D")
theme_emoji2 = simplegui.load_image("http://getemoji.com/assets/og/mobile.png")

#Card Size and Center
CARD_SIZE =(80, 85)
CARD_CENTER = (56, 72)

#Tile Image Card Coordinates
CARD_COLUMN = range(17)
CARD_ROW = range(5)

#initialize global variables
questions_GLOBAL = 0
flags_GLOBAL = 0

#Helper fomula: Distance formula
def dist_formula(p, q):
    return math.sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)

###=======Define class objects==========

class Premise:
    """
    Creates the premise class object and all of it's properties. 
    Takes a code and looks it up in a dictionary. Draws the 
    returned value
    """    
    
    def __init__(self, p_code = "p-strangtouch", custom_text = "None"):
        self.p_code = p_code
        self.custom = custom_text
        
    def __str__(self):
        return str(self.p_code)
    
    def get_p_code(self):
        return self.p_code
    
    def change_premise(self, p_code):
        self.p_code = p_code #Note: Decryptionizer returns a list.
    
    def get_premise(self):
        return premise_dictionary.p_lookup(self.p_code)
    
    def change_custom_prem(self, text):
        self.custom = str(text) #Note: Decryptionizer returns a list.
    
    def get_custom_prem(self):
        return self.custom
    
    def draw(self, canvas):
        if self.p_code == "p-custom":
            canvas.draw_text(self.get_custom_prem(), [40, 114], 15, "White")
        else:
            canvas.draw_text(self.get_premise(), [40, 114], 15, "White")
    
class Card:
    """
    Creates the card class object and all of it's properties. 
    Takes coordinates of the card and position 
    and draws the card on the canvaas.
    """
    
    def __init__(self, col_input = 0, row_input = 0, pos = [100,100], theme = "emj", select = False, 
                 eliminate = False, secret_card = False, back = True, lifespan = None, 
                 animated = False, radius = 40):
        
        if (col_input in CARD_COLUMN) and (row_input in CARD_ROW):
            self.c_col = col_input
            self.c_row = row_input
        else:
            self.c_col = None
            self.c_row = None
            print ("Invalid card: ", col_input, row_input)
        
        self.obj_coord = [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]]
        
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        
        self.theme = theme
        self.animated = animated
        self.select = select
        self.eliminate = eliminate
        self.secret_card = secret_card
        self.back = back
        self.radius = radius

    def __str__(self):
        return str(self.theme) +";"+ str(self.c_col) +";"+ str(self.c_row)

    def get_cardID(self):
        return tuple([self.c_col,self.c_row])
    
    def get_card_string(self):
        return str(self.theme) +";"+ str(self.c_col) +";"+ str(self.c_row)
    
    def get_radius(self):
        return self.radius
    
    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated
    
    def get_selected(self):
        return self.select

    def get_eliminated(self):
        return self.eliminate
    
    def get_secret_card(self):
        return self.secret_card
    
    def get_theme(self):
        return self.theme
    
    def change_c_col(self, c_col):
        self.c_col = c_col
    
    def change_c_row(self, c_row):
        self.c_row = c_row
        
    def change_theme(self, theme):
        self.theme = theme
    
    def theme_lookup(self):
        dict_theme = {"emj": theme_emoji, 
                      "emj2": theme_emoji2}
        
        return dict_theme[self.theme]
    
    def make_secret(self):
        self.secret_card = True
    
    def make_nonsecret(self):
        self.secret_card = False
    
    def eliminate_card(self):
        self.eliminate = True
        if self.select == True:
            self.select = False
        else:
            pass

    def uneliminate_card(self):
        self.eliminate = False
        
    def flip_card(self):
        if self.back == True:
            self.back = False
        elif self.back == False:
            self.back = True
            self.eliminate = False
            self.select = False
        else:
            pass
    
    def draw(self, canvas):
        topleft_x = self.obj_coord[0]-.465*CARD_SIZE[0]
        topleft_y = self.obj_coord[1]-.45*CARD_SIZE[1]
        topright_x = self.obj_coord[0]+.465*CARD_SIZE[0]
        topright_y = self.obj_coord[1]-.45*CARD_SIZE[1]
        bottomright_x = self.obj_coord[0]+.465*CARD_SIZE[0]
        bottomright_y = self.obj_coord[1]+.45*CARD_SIZE[1]
        bottomleft_x = self.obj_coord[0]-.465*CARD_SIZE[0]
        bottomleft_y = self.obj_coord[1]+.45*CARD_SIZE[1]
        
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * CARD_COLUMN.index(self.c_col) 
                    + math.floor((CARD_COLUMN.index(self.c_col)+1)/2), 
                    CARD_CENTER[1] + CARD_SIZE[1] * CARD_ROW.index(self.c_row))          

        if (self.eliminate == True and self.secret_card == False):
            canvas.draw_polygon([[topleft_x, topleft_y],
                                [topright_x, topright_y],
                                [bottomright_x, bottomright_y],
                                [bottomleft_x, bottomleft_y]], 2.5, "Grey", "Green")
        
        elif (self.eliminate == True and self.secret_card == True):
            canvas.draw_polygon([[topleft_x, topleft_y],
                                [topright_x, topright_y],
                                [bottomright_x, bottomright_y],
                                [bottomleft_x, bottomleft_y]], 2.5, "Red", "Red")            
            
        elif self.eliminate == False:
            if self.select == True:
                canvas.draw_polygon([[topleft_x, topleft_y],
                                     [topright_x, topright_y],
                                     [bottomright_x, bottomright_y],
                                     [bottomleft_x, bottomleft_y]], 2.5, "Grey", "Black")
            elif self.select == False:
                canvas.draw_polygon([[topleft_x, topleft_y],
                                     [topright_x, topright_y],
                                     [bottomright_x, bottomright_y],
                                     [bottomleft_x, bottomleft_y]], 2.5, "Darkseagreen", "Darkseagreen")
            else:
                pass
        else:
            pass
        
        if self.back == False:
            canvas.draw_image(self.theme_lookup(), card_loc, CARD_SIZE, self.obj_coord, [.8*CARD_SIZE[0],.8*CARD_SIZE[0]])
        else:
            canvas.draw_image(logo_image, logo_info.get_center(), logo_info.get_size(), 
                              self.obj_coord, [.8*CARD_SIZE[0],.8*CARD_SIZE[0]])
            
        if self.eliminate == True:
            canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(),
                              self.obj_coord, [.8*CARD_SIZE[0],.8*CARD_SIZE[0]])
        else:
            pass

    def selectable(self, click_pos):
        self.select_logic = (dist_formula(self.obj_coord, click_pos) < self.radius 
                             and self.select == False and self.eliminate == False)
        if self.select_logic == True:
            return True
        else:
            return False

    def select_click(self, click_pos = None):
        if click_pos == None:
            self.select = True
        else:
            if self.select_logic == True:
                self.select = True
            else:
                pass

    def deselectable(self, click_pos):
        self.deselect_logic = (dist_formula(self.obj_coord, click_pos) < self.radius 
                             and self.select == True)
        if self.deselect_logic == True:
            return True
        else:
            return False
        
    def deselect_click(self, click_pos = None):
        if click_pos == None:
            self.select = False
        else:
            if self.deselect_logic == True:
                self.select = False
            else:
                pass

class LockIn_Guesser:
    """
    Creates the lockin button for the Guesser class object and 
    all of it's properties. Takes game and coordinates and 
    modifies properties of the card object.
    """
    def __init__(self, game, pos = [168, 455], size = [512*.2,512*.18], 
                 card_match = False, eliminate = False, animated = False, 
                 radius = 40, lifespan = .8):
        
        self.game = game
        self.pos = pos        
        self.size = size

        self.card_match = card_match
        self.eliminate = eliminate
        self.animated = animated
        self.radius = radius
        
        self.age = 0
        self.lifespan = lifespan

    def __str__(self):
        return str(self.size +","+ self.pos)

    def get_radius(self):
        return self.radius
    
    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    def draw(self, canvas):
        if self.animated == True:
            canvas.draw_image(lock_buttonRed_image, lock_buttonRed_info.get_center(), 
                              lock_buttonRed_info.get_size(), self.pos, self.size)
            self.update()
        else:
            canvas.draw_image(lock_button_image, lock_button_info.get_center(), 
                              lock_button_info.get_size(), self.pos, self.size)

    def select_click(self, click_pos):
        if (len(self.game.get_hand_list()) >= 1 and 
            self.card_match == False):
            self.eliminate = False
        else:
            self.eliminate = True
        
        self.select_logic = (dist_formula(self.pos, click_pos) < self.radius 
                             and self.eliminate == False)
        
        if self.select_logic == True:
            self.animated = True
        else:
            self.animate = False
        
    def update(self):
        self.age += 0.1
        if self.age > self.lifespan:
            self.animated = False
            self.age = 0
        else:
            pass
        
        self.game.discard_hand()


class Cards_In_Play:
    """
    Creates a game object class and all its properties.
    Takes a list of cards and tracks player's hand and unselected cards.
    """
    
    def __init__(self, card_list):
        self.card_list = card_list
        self.hand_list = []
        self.guess_count = 0

    def __str__(self):
        return str(self.card_list + "," + self.hand_list)	
            #return a string representation of cards in play

    def get_card_list(self):
        return self.card_list
    
    def get_hand_list(self):
        return self.hand_list
    
    def get_guess_count(self):
        return self.guess_count
    
    def flip_all(self):
        for i in range(len(self.card_list)):
            self.card_list[i].flip_card()
    
    def add_hand(self, card):
        if len(self.card_list) >= 1:
            self.hand_list.append(card)
            self.card_list.remove(card)
        else:
            pass
        
        #print self.card_list ##for testing
    
    def remove_hand(self, card):
        if len(self.hand_list) >= 1:
            self.hand_list.remove(card)
            self.card_list.append(card)
        else:
            pass
        
    def discard_hand(self):
        if len(self.hand_list) >= 1:
            self.guess_count += len(self.hand_list)
            for i in range(len(self.hand_list)):
                if self.hand_list[i].get_secret_card() == True:
                    self.card_list = []
                    self.hand_list[i].eliminate_card()
                else:
                    self.hand_list[i].eliminate_card()
            self.hand_list = []
        else:
            pass
    
    def new_list(self, card_list):
        self.card_list = card_list
        self.hand_list = []
        self.guess_count = 0
                    
class Guess_Clicker:
    """
    Creates multiple Card objects. Takes a list and creates
    a list of objects and puts them into play.
    """
    
    def __init__(self, cards_inplay):
        self.cards_inplay = cards_inplay
                
    def __str__(self):
        return str(self.cards_inplay)

    def click_loop(self, click_pos, game):
        for i in range(len(self.cards_inplay)):
            if (self.cards_inplay[i].selectable(click_pos) == True and 
                len(game.get_hand_list()) <= 2):
                self.cards_inplay[i].select_click(click_pos)
                game.add_hand(self.cards_inplay[i])
            elif self.cards_inplay[i].deselectable(click_pos) == True:
                self.cards_inplay[i].deselect_click(click_pos)
                game.remove_hand(self.cards_inplay[i])
            else:
                pass

class Start_Game:
    """
    Creates a Start Game object class that initates 
    a new game for the Guesser.
    """
        
    def __init__(self, started = False):
        self.started = started
        
    def __str__(self):
        return str(self.started)
    
    def get_started(self):
        return self.started
    
    def splash(self, click, game):
        if self.started == False:
            self.started = True
            game.flip_all()
        else:
            pass
        
    def restart(self, game, key):
        global questions_GLOBAL, flags_GLOBAL
        questions_GLOBAL = 0
        flags_GLOBAL = 0
        
        self.started = False
        game.discard_hand()
        
        key.new_card_list([card1,card2,card3,
                           card4, card5,card6,
                           card7, card8, card9])
        
        code = key.decrypt()
        
        key.modify_cards(code[0],code[1],code[2],code[3])
        
        game.new_list(key.get_card_list())
        
        premise.change_premise(code[4])
        premise.change_custom_prem(code[5])
        
        game.flip_all()
        
    def new(self, game, randomizer):
        global questions_GLOBAL, flags_GLOBAL
        questions_GLOBAL = 0
        flags_GLOBAL = 0
        
        self.started = False
        
        key.new_card_list([card1,card2,card3,
                           card4, card5,card6,
                           card7, card8, card9])
        
        code = key.decrypt()
        
        key.modify_cards(code[0],code[1],code[2],code[3])
        
        game.new_list(key.get_card_list())
        
        premise.change_premise(code[4])
        premise.change_custom_prem(code[5])
        
        

class Decryptionizer:
    """
    Decryptionizer class that takes a list cards and modifies them 
    based on and encrypted code which it decyphers and reveals coordinates, 
    then changes card images to reflect those coordinates.
    """
    
    def __init__(self, card_list):
        self.card_list = card_list
    
    def __str__(self):
        return str(self.card_list)
    
    def get_card_list(self):
        return self.card_list
    
    def new_card_list(self, new_list):
        self.card_list = new_list
        
    def decrypt(self):
        cypher = list(input("Input Key:").split(";"))
        if (cypher == ['None'] 
            or cypher == ['']):
            cypher = ["emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,
                      "emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,
                      "p-custom","Error: The input key is missing."]
            print ("Error: The input key is missing.")
        elif (len(cypher) != 32):
            cypher = ["emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,
                      "emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,"emj",0,0,
                      "p-custom","Error: The input key is invalid."]
            print ("Error: The input key is invalid.")
        else:
            pass
        
        #Seperate out premise.
        premise_id = []
        premise_custom = []
        
        premise_id.append(cypher[-2])
        premise_custom.append(cypher[-1])
        cypher.pop(-1)
        cypher.pop(-1)
        
        #Seperate out coordinates and theme in cypher.
        theme_list = []
        secret_theme = []
        
        cypher_int = []
        for i in range(len(cypher)):
            if i % 3 == 0:
                theme_list.append(cypher[i])
            else:
                cypher_int.append(cypher[i])
                
        secret_theme.append(theme_list[-1])
        theme_list.pop(-1)
        
        #Converts cypher into integers
        coord_list = []
        for i in range(len(cypher_int)):
            coord_list.append(int(cypher_int[i]))
    
        #Decyphers secret code and removes from cypher_int
        secret_code = []
        secret_code.append(coord_list[-2])
        secret_code.append(coord_list[-1])
        coord_list.pop(-1)
        coord_list.pop(-1)
    
        #Decyphers main code and removes from cypher_int
        coord_x = []
        coord_y = []
        decypted_code = []
    
        for i in range(len(coord_list)):
            if i % 2 == 0:
                coord_x.append(coord_list[i])
            elif i % 2 == 1:
                coord_y.append(coord_list[i])
            else:
                pass
        
        for i in range(len(coord_x)):
            individual_coord = []
            individual_coord.append(coord_x[i])
            individual_coord.append(coord_y[i])
            decypted_code.append(individual_coord)
            individual_coord = []

        return [decypted_code, secret_code, theme_list, 
                secret_theme, premise_id[0], premise_custom[0]]

    def modify_cards(self, decypted_code, secret_code, theme_list, secret_theme):
        for i in range(len(self.card_list)):
            self.card_list[i].change_c_col(decypted_code[i][0])
            self.card_list[i].change_c_row(decypted_code[i][1])
        
        for i in range(len(self.card_list)):
            if (self.card_list[i].get_cardID() == tuple(secret_code) and
                self.card_list[i].get_theme() == str(secret_theme[0])):
                self.card_list[i].make_secret()
            else:
                self.card_list[i].make_nonsecret()
                
        for i in range(len(self.card_list)):
            self.card_list[i].change_theme(theme_list[i])

###=======Define Event Handlers==========
def innitiate_game():
    start.new(game1, key)
    
def restart_game():
    if start.get_started() == True:
        start.restart(game1, key)
    else:
        pass

def questions_add():
    global questions_GLOBAL, flags_GLOBAL
    questions_GLOBAL += 1
    
def questions_sub():
    global questions_GLOBAL, flags_GLOBAL
    if questions_GLOBAL >= 1:
        questions_GLOBAL += -1
    else:
        pass
       
def flags_add():
    global questions_GLOBAL, flags_GLOBAL
    flags_GLOBAL += 1
    
def flags_sub():
    global questions_GLOBAL, flags_GLOBAL
    if flags_GLOBAL >= 1:
        flags_GLOBAL += -1
    else:
        pass


###=======Initializes Class Objects==========
start = Start_Game(started = False)
card1 = Card(1, 3, [17, 100], select = False, eliminate = False)
card2 = Card(8, 1, [112, 100], select = False, eliminate = False)
card3 = Card(16, 1, [205, 100], select = False, eliminate = False)
card4 = Card(1, 1, [17, 200-5], select = False, eliminate = False, secret_card = True)
card5 = Card(8, 2, [112, 200-5], select = False, eliminate = False)
card6 = Card(6, 1, [205, 200-5], select = False, eliminate = False)
card7 = Card(5, 3, [17, 300-10], select = False, eliminate = False)
card8 = Card(9, 2, [112, 300-10], select = False, eliminate = False)
card9 = Card(16, 1, [205, 300-10], select = False, eliminate = False)

key = Decryptionizer([card1,card2,card3, 
                      card4,card5,card6,
                      card7,card8,card9])

premise = Premise()

game1 = Cards_In_Play(key.get_card_list())

guesser = Guess_Clicker(key.get_card_list())

lock_in = LockIn_Guesser(game1, [167, 475], [512*.2,512*.18])

###=======Register Handlers and Initialize Frame==========
def draw(canvas):
    canvas.draw_image(iphone_image, iphone_info.get_center(), iphone_info.get_size(), 
                      [CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2], [CANVAS_WIDTH, CANVAS_HEIGHT])

    premise.draw(canvas)
    lock_in.draw(canvas)
    card1.draw(canvas)
    card2.draw(canvas)
    card3.draw(canvas)
    card4.draw(canvas)
    card5.draw(canvas)
    card6.draw(canvas)
    card7.draw(canvas)
    card8.draw(canvas)
    card9.draw(canvas)
    
    
    
    # draw UI
    #canvas.draw_text("Guess which card I picked:", [40, 109], 20, "White")
    canvas.draw_text("Guesses:", [40, 450-23], 15, "White")
    canvas.draw_text("Questions:", [130, 450-23], 15, "White")
    canvas.draw_text("Flags:", [235, 450-23], 15, "White")
    canvas.draw_text(str(game1.get_guess_count()), [105, 450-23], 15, "White")
    canvas.draw_text(str(questions_GLOBAL), [205, 450-23], 15, "White")
    canvas.draw_text(str(flags_GLOBAL), [280, 450-23], 15, "White")
    
def mouse_click(click):
    if start.get_started() == False:
        start.splash(click, game1)
    elif start.get_started() == True:
        lock_in.select_click(click)
        guesser.click_loop(click, game1)
        ##game1.click_loop(click)
    else:
        pass

#initialize frame
frame = simplegui.create_frame("Mind Match", CANVAS_WIDTH, CANVAS_HEIGHT)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("New Game", restart_game, 200)
frame.add_button("Questions +", questions_add, 200)
frame.add_button("Questions -", questions_sub, 200)
frame.add_button("Flags +", flags_add, 200)
frame.add_button("Flags -", flags_sub, 200)
frame.set_draw_handler(draw)
frame.set_mouseclick_handler(mouse_click)

###=======Launch Game==========
frame.start()
innitiate_game()